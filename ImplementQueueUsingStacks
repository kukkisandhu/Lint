Algorithms : 1. TAKE 2 STACKS -> TEMP AND MAINSTACK
IF   
  MAINSTACK IS EMPTY INSERT THE ELEMENT INTO MAINSTACK. 
ELSE 
  POP THE ELEMENTS FROM MAINSTACK AND PUSH IT INTO THE TEMP
  NOW PUSH THE ELEMENT INTO THE MAIN STACK 
  NOW POP THE ELEMENTS FROM TEMP STACK AND PUSH THEM INTO MAINSTACK TILL TEMP STACK IS NOT EMPTY. 


2. POP -> POP ELEMENT FROM MAIN STACK MAKING SURE THAT MAIN STACK IS NOT EMPTY
3. TOP -> PEEK THE ELEMENT FROM MAIN STACK 



public class MyQueue {
    Stack<Integer> mystack=new Stack<Integer>();
    Stack<Integer> temp=new Stack<Integer>();
    public MyQueue() {
        // do intialization if necessary
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        if(mystack.empty()==true){
            mystack.push(element);
        }
        else{
            while(!mystack.empty()==true){
                temp.push(mystack.pop());
            }
        
            mystack.push(element);
            while(!temp.empty()==true){
                mystack.push(temp.pop());
            }
        }
        
        
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        return mystack.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        return mystack.peek();
    }
}
